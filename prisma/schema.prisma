// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./data.db"
}

model User {
  id       String   @id @default(cuid())
  name     String?
  email    String   @unique
  password String
  role     String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TrackedTime TrackedTime[]
  Log Log[]
  breakSettings UserBreakSettings?

  vacationDaysPerYear Int       @default(30)
  vacationDaysTaken   Int       @default(0)
  vacations          Vacation[]
}

model UserBreakSettings {
  id            Int      @id @default(autoincrement())
  userId        String   @unique
  breakDuration Int      @default(30)
  autoInsert    Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Setting {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt
}

model TrackedTime {
  id        Int       @id @default(autoincrement())
  userId    String
  startTime DateTime
  endTime   DateTime?
  duration  BigInt
  isBreak   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Log {
  id          Int         @id @default(autoincrement())
  userId      String?
  action      String    
  entity      String?   
  entityId    String?   
  details     String?   
  ipAddress   String?   
  date        DateTime    @default(now())
  user        User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([date])
  @@index([action])
}

model Vacation {
  id          Int      @id @default(autoincrement())
  userId      String
  startDate   DateTime
  endDate     DateTime
  days        Int
  status      String   @default("pending")
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}